#if 0
 Solution of Prime Calculation Task

Von der Idee her hätt ich überlegt, einen Iterator i von p-1 bis 2 laufen zu lassen und für jedes i zu überprüfen ob p%i==0 gilt. Wenn ja, dann ist es keine Primzahl und der Algorithmus bricht ab. Wenn nein, dann wird i dekrementert und weiter überprüft. Ist einmal i<2, dann gab es keinen Fall von p%i==0 und somit ist die gegebene Zahl eine Primzahl.
Ich hätte vorgeschlagen dass wir den Stack in der Größenordnung O(1) halten, somit keine "echte" Rekursion, sondern i schon in-place dekrementieren. Das würde für große p Speicher sparen und beim Auflösen der "Rekursion" schneller gehen.
Außerdem müssen p und B dann nicht immer mitgeschleppt werden sondern können immer von der Originalposition eingelesen/kopiert werden.

INPUT ... gegebene Primzahl
IFTE  ... if-then-else aus der Angabe
BODY  ... rekursiver Aufruf, der i dekrementiert, und die Auswertung / einen weiteren rekursiven Aufruf zurückgibt



Vorteile:
+) Stack wird nicht unnötig groß aufgebaut, sondern i gleich in-place dekrementiert.
+) Sobald ein Zeuge gefunden ist für das gilt p%i==0 (keine Primzahl), bricht der Algorithmus ab.

Nachteile:
-) Es werden alle Zahlen von p-1 bis 2 durchiteriert und nicht nur die "relevanten" Primzahlen.
-) Für Zahlen p<2 liefert der Algorithmus auch True.
#endif

#include "common.h"

#define INPUT 98807
#define BODY \
	[ \
		1- \ 	// den Iterator (steht am Stack immer nach INPUT und BODY) in-place dekrementieren - wird auch vor dem ersten Vergleich benötigt, da INPUT%INPUT natürlich 0 ergibt...
		2c \ 	// i kopieren damit darauf gearbeitet werden kann
		2< \ 	// überprüfen, ob i<2 ist, denn dann soll abgebrochen werden
		[0] \ 	// True-Zweig von (i<2), BODY terminiert damit und gibt True zurück, da kein Fall aufgetreten ist, in dem INPUT%i==0 war
		[ \ 	// False-Zweig von (i<2), überprüft auf INPUT%i==0 und je nach Ergebnis wird False zurückgegeben, oder ein weiterer rekursiver Aufruf getätigt
			4c 3c \	// hole Kopien von INPUT und i um damit arbeiten zu können - Vorsicht, Denkfalle: der Platz am Stack vom True- oder False-Wert des (i<2)-Vergleichs ist an dieser Stelle schon freigegeben!
			% \ 	// Modulo-Operation INPUT%i
			0= \ 	// Vergleich, ob die Modulo-Operation 0 geliefert hat (keine Primzahl => linker Zweig), oder nicht (weiter rekursieren => rechter Zweig)
			[[1]] \	// keine Primzahl, 1 wird zurückgegeben
			[3c]  \	// BODY holen um weiter Rekursion auszuführen
			IFTE a a \ // je nach Ergebnis von (INPUT%i==0) wird der linke oder rechte Teil ausgeführt - das zweite a ist notwendig, da in [3c] dann [BODY] stehen wird und BODY wieder eckig geklammert ist
		] \
		IFTE a \ // führt entweder den True- oder den False-Zweig von (i<2) aus
	]

/* Programm */
INPUT \        // Primzahl
	BODY \ 	// Rekursives Programm welches bis zum Schluss am Stack bleiben
	3c \ 	// workingcopy von INPUT
	2/ 1+ \ // Es reicht von p/2 auf Teilbarkeit zu überprüfen; Inkrementieren ist notwendig, da im rekursiven Programm am Anfang dekrementiert wird
	3c \ 	// Kopie von BODY mit welcher gearbeitet wird
	a \ 		// erster Aufruf von BODY
	3d 3d 3d 	// nachdem BODY terminiert ist und entweder 0 oder 1 zurückgegeben hat, werden das ursprüngliche INPUT BODY und der aktuelle Iterator i gelöscht und es bleibt nur das Ergebnis übrig
